{"version":3,"sources":["assets/imgplaceholder.png","components/atoms/Header.js","components/atoms/LoggedIn.js","queries/queries.js","components/atoms/AddPost.js","components/atoms/Divider.js","components/atoms/PicIcon.js","components/atoms/Name.js","components/atoms/Post.js","components/atoms/AddComment.js","components/molecules/CommentItem.js","components/molecules/PostItem.js","components/molecules/Login.js","components/pages/Homepage.js","AppRouter.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderWrapper","styled","div","_templateObject","InsideHeadWrapper","h1","_templateObject2","Header","props","react_default","a","createElement","react_router_dom","to","style","textDecoration","color","LoggedInWrapper","LoggedIn_templateObject","InnerWrapper","LoggedIn_templateObject2","ButtonWrapper","button","_templateObject3","LoggedIn","onClick","window","location","reload","Component","getUsersQuery","gql","queries_templateObject","addUserMutation","queries_templateObject2","queries_templateObject3","_templateObject4","addPostMutation","_templateObject5","addPostCommentMutation","_templateObject6","getPostQuery","_templateObject7","_templateObject8","InputWrapper","input","AddPost_templateObject","AddPost_templateObject2","AddPost","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newpost","e","today","Date","preventDefault","variables","userID","datePublished","getDate","getMonth","getFullYear","content","refetchQueries","query","id","setState","_this2","onSubmit","submitForm","value","onChange","target","placeholder","AddPost_ButtonWrapper","compose","graphql","name","HrWrapper","hr","Divider_templateObject","Divider","DivWrapper","PicIcon_templateObject","PicIconWrapper","img","PicIcon_templateObject2","PicIcon","height","newht","src","imgplaceholder","NameWrapper","Name_templateObject","Name","names","firstName","user","lastName","PostWrapper","span","Post_templateObject","Post","inside","postcomment","comment","CommentWrapper","form","AddComment_templateObject","LabelWrapper","label","AddComment_templateObject2","AddComment_templateObject3","AddComment","newcomment","postID","post","dateComment","AddComment_InputWrapper","buttonClick","CommentItemWrapper","CommentItem_templateObject","PostItem","comments","map","index","key","atoms_PicIcon","atoms_Name","atoms_Post","atoms_Divider","displayComments","PostItemWrapper","PostItem_templateObject","data","loading","posts","atoms_AddComment","CommentItem","postcomments","displayPosts","options","LoginWrapper","Login_templateObject","Login_templateObject2","Login_templateObject3","Login_templateObject4","FormWrapper","Login_templateObject5","Login","login","email","password","error","errorMessage","submitCreateAccountForm","users","find","test","trim","dateRegistered","pagechange","atoms_Header","Login_InsideHeadWrapper","Login_InputWrapper","type","passwordMask_min_default","inputStyles","textAlign","buttonStyles","display","Login_ButtonWrapper","onClickButton","client","ApolloClient","uri","HomepageWrapper","Homepage_templateObject","HeadWrapper","Homepage_templateObject2","Head2Wrapper","Homepage_templateObject3","AddPostWrapper","Homepage_templateObject4","DividerWrapper","Homepage_templateObject5","Homepage_templateObject6","Homepage","PageChange","loggedin","react_apollo_esm","atoms_LoggedIn","atoms_AddPost","Homepage_PostItemWrapper","molecules_PostItem","molecules_Login","AppRouter","react_router","path","component","ReactDOM","render","src_AppRouter","document","getElementById"],"mappings":"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","file":"static/js/main.4ec88b22.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgplaceholder.0ee8c1d1.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { Link } from 'react-router-dom';\r\n\r\n//components\r\n// import Login from './Login';\r\n\r\nconst HeaderWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n    justify-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.h1`\r\n    margin-left: 20px;\r\n    color: white;\r\n`\r\nconst Header = (props) =>{\r\n    return (\r\n            <HeaderWrapper>\r\n                <InsideHeadWrapper>\r\n                    <Link to=\"/\" style={{textDecoration:\"none\", color:\"white\"}}>Fitbook</Link>\r\n                </InsideHeadWrapper>\r\n            </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\n\r\nconst LoggedInWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n`\r\n\r\nconst InnerWrapper = styled.div`\r\n    display: block;\r\n    text-align: right;\r\n    margin-top: 30px;\r\n    color: white;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    all: unset;\r\n    margin-right: 40px;\r\n    color: white;\r\n    :hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nclass LoggedIn extends Component{\r\n    render () {\r\n        return (\r\n            <LoggedInWrapper>\r\n                <InnerWrapper>\r\n                        <ButtonWrapper onClick={() => window.location.reload()}>Logout</ButtonWrapper>\r\n                </InnerWrapper>\r\n            </LoggedInWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoggedIn;","import {gql} from 'apollo-boost';\r\n\r\nconst getUsersQuery = gql`\r\n    {\r\n        users {\r\n            id\r\n            email\r\n            password\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostsQuery = gql`\r\n    {\r\n        posts {\r\n            id\r\n            userID\r\n            datePublished\r\n            content\r\n            user{\r\n                id\r\n                firstName\r\n                lastName\r\n            }\r\n            postcomments{\r\n                id\r\n                comment\r\n                user{\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst addAuthUserMutation = gql`\r\n    mutation($userID: ID!, $token: String!, $tokenExpiration: Int!) {\r\n        addUser(userID: $userID, token: $token, tokenExpiration: $tokenExpiration){\r\n            userID\r\n            token\r\n            tokenExpiration\r\n        }\r\n    }\r\n`\r\n\r\nconst addUserMutation = gql`\r\n    mutation($email: String!, $password: String!, $dateRegistered: String!, $firstName: String!, $lastName: String!) {\r\n        addUser(email: $email, password: $password, dateRegistered: $dateRegistered, firstName: $firstName, lastName: $lastName){\r\n            email\r\n            password\r\n            dateRegistered\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostMutation = gql`\r\n    mutation($userID: ID!, $datePublished: String!, $content: String!) {\r\n        addPost(userID: $userID, datePublished: $datePublished, content: $content){\r\n            userID\r\n            datePublished\r\n            content\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostCommentMutation = gql`\r\n    mutation($postID: ID!, $userID: ID!, $comment: String!, $dateComment: String!) {\r\n        addPostComment(postID: $postID, userID: $userID, comment: $comment, dateComment: $dateComment){\r\n            postID\r\n            userID\r\n            comment\r\n            dateComment\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostStatMutation = gql`\r\n    mutation($postID: String!, $likeCount: Number!) {\r\n        addPostStat(postID: $postID, likeCount: $likeCount){\r\n            postID\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostQuery = gql`\r\n    query($id: ID){\r\n        user(id: $id){\r\n            posts {\r\n                id\r\n                userID\r\n                datePublished\r\n                content\r\n                postcomments {\r\n                    id\r\n                    postID\r\n                    userID\r\n                    comment\r\n                    dateComment\r\n                    user {\r\n                        firstName\r\n                        lastName\r\n                    }\r\n                }\r\n                poststat {\r\n                    id\r\n                    postID\r\n                    likeCount\r\n                }\r\n                user {\r\n                    firstName\r\n                    lastName\r\n                    dateRegistered\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport { getUsersQuery, \r\n         getPostsQuery, \r\n         addAuthUserMutation,\r\n         addUserMutation, \r\n         addPostMutation, \r\n         addPostCommentMutation, \r\n         addPostStatMutation, \r\n         getPostQuery };","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostMutation } from '../../queries/queries';\r\n\r\nconst InputWrapper = styled.input`\r\n    height: 30px;\r\n    width: 50vw;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 3px;\r\n`\r\n\r\nclass AddPost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newpost: '',\r\n        }\r\n    }\r\n\r\n    submitForm(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostMutation({\r\n            variables: {\r\n                userID: this.props.userID,\r\n                datePublished: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                content: this.state.newpost\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.userID\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newpost: '',\r\n        })\r\n\r\n    }\r\n\r\n     render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={(e) => this.submitForm(e)}>\r\n                    <InputWrapper \r\n                    value={this.state.newpost}\r\n                    onChange={(e) => this.setState ({newpost: e.target.value})}\r\n                    placeholder=\"What fitness task did you do today?\" />\r\n                </form>\r\n                <ButtonWrapper onClick={(e) => this.submitForm(e)}>Submit</ButtonWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostMutation, {name: \"addPostMutation\"})\r\n)(AddPost);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HrWrapper = styled.hr`\r\n    border-top: 1px;\r\n    border-color: #DCDCDC;\r\n`\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <HrWrapper />\r\n    )\r\n}\r\n\r\nexport default Divider;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport imgplaceholder from '../../assets/imgplaceholder.png';\r\n\r\nconst DivWrapper = styled.div`\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n`\r\n\r\nconst PicIconWrapper = styled.img`\r\n    width: auto;\r\n    border: 1px solid rgb(192,192,192);\r\n    border-radius: 50%;\r\n`\r\n\r\nclass PicIcon extends Component{\r\n    render() {\r\n        return (\r\n            <DivWrapper>\r\n                <PicIconWrapper height={this.props.newht}src={imgplaceholder}/>\r\n            </DivWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PicIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NameWrapper = styled.div`\r\n    margin-left: 10px;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    display: inline-block;\r\n`\r\n\r\nconst Name = (props) => {\r\n        return (\r\n            <NameWrapper>\r\n                <span>\r\n                    {props.names? props.names.firstName : props.user.firstName}\r\n                </span>\r\n                <span>\r\n                    &nbsp;\r\n                </span>\r\n                <span>\r\n                    {props.names? props.names.lastName : props.user.lastName}\r\n                </span>\r\n            </NameWrapper>\r\n        )\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PostWrapper = styled.span`\r\n    font-size: 12px;\r\n    margin-top: 5x;\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nclass Post extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PostWrapper>\r\n                    {this.props.inside? this.props.inside : this.props.postcomment.comment }\r\n                </PostWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostCommentMutation } from '../../queries/queries';\r\n\r\nconst CommentWrapper = styled.form`\r\n    margin-top: 10px;\r\n    font-size: 12px;\r\n`\r\n\r\nconst LabelWrapper = styled.label`\r\n    display: block;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    width: 700px;\r\n    height: 30px;\r\n    display: block;\r\n    //resize: vertical;\r\n`\r\n\r\nclass AddComment extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newcomment: '',\r\n        }\r\n    }\r\n\r\n    buttonClick(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostCommentMutation({\r\n            variables: {\r\n                postID: this.props.post.id,\r\n                userID: this.props.post.userID,\r\n                dateComment: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                comment: this.state.newcomment\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.post.userID,\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newcomment: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CommentWrapper onSubmit={(e) => e.preventDefault()}>\r\n                    <LabelWrapper>Comment</LabelWrapper>\r\n                    <InputWrapper \r\n                    value={this.state.newcomment}\r\n                    onChange={(e) => this.setState ({newcomment: e.target.value})}\r\n                    placeholder=\"Enter comment here...\"></InputWrapper>\r\n                </CommentWrapper>\r\n                <button onClick={(e) => this.buttonClick(e)}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostCommentMutation, {name: \"addPostCommentMutation\"})\r\n)(AddComment);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport Divider from '../atoms/Divider';\r\n\r\nconst CommentItemWrapper = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n\r\n    displayComments(){\r\n        \r\n        const comments = this.props.comments;\r\n\r\n        return (\r\n            comments.map ((comment, index) =>   \r\n                <CommentItemWrapper key={index}>\r\n                    <div>\r\n                        <PicIcon newht={\"25px\"}/>\r\n                        <Name user={comment.user}/>\r\n                    </div>\r\n                    <div>\r\n                        <Post postcomment={comment}/>\r\n                        <Divider />\r\n                    </div>\r\n                </CommentItemWrapper>\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayComments()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql} from 'react-apollo';\r\nimport { getPostQuery } from '../../queries/queries';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport AddComment from '../atoms/AddComment';\r\nimport Divider from '../atoms/Divider';\r\nimport CommentItem from './CommentItem';\r\n\r\nconst PostItemWrapper = styled.div`\r\n    margin-bottom: 60px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n    displayPosts() {\r\n        const data = this.props.data;\r\n        \r\n        if(data.loading) {\r\n            return (\r\n                <div>Loading Posts...</div>\r\n            )\r\n        } else {\r\n                return data.user.posts.map((post,index) => {\r\n                    return (\r\n                            <PostItemWrapper key={index}>\r\n                                <div>\r\n                                    <PicIcon newht={\"50px\"}/>\r\n                                    <Name names={post.user}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Post inside={post.content}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <AddComment post={post}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <CommentItem comments={post.postcomments}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Divider />\r\n                                </div>\r\n                            </PostItemWrapper>\r\n                    )\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayPosts()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default graphql(getPostQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.userID\r\n            }\r\n        }\r\n    }\r\n})(PostItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getUsersQuery, addUserMutation } from '../../queries/queries';\r\nimport PasswordMask from 'react-password-mask';\r\n// import jwt from 'jsonwebtoken';\r\n\r\nimport Header from '../atoms/Header'\r\n\r\nconst LoginWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    margin-right: 20px;\r\n    color: black;\r\n    align-items: center;\r\n    text-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.span`\r\n    display: flex;\r\n    font-weight: bold;\r\n    margin: 20px 0;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    text-align: center;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 10px;\r\n`\r\n\r\nconst FormWrapper = styled.div`\r\n    margin-top: 5px;\r\n`\r\n\r\nclass Login extends Component{\r\n    state = {\r\n        login: true,\r\n        email: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n    }\r\n\r\n    onClickButton(e) {\r\n        e.preventDefault();\r\n        this.setState({\r\n            login: !this.state.login,\r\n            error: true,\r\n            errorMessage: \"\",\r\n        }, () => null)\r\n    }\r\n\r\n    submitCreateAccountForm = (e) => {\r\n        const regex = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n        const today = new Date();\r\n        e.preventDefault();\r\n\r\n        if(!this.state.login && this.state.firstName && this.state.lastName && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"User already exists!\"\r\n                })\r\n            } \r\n            else if (regex.test(this.state.email) === false) {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"Invalid Email Address!\"\r\n                })\r\n            }\r\n            else { \r\n                this.props.addUserMutation({\r\n                    variables: {\r\n                        email: this.state.email.trim(),\r\n                        password: this.state.password.trim(),\r\n                        dateRegistered: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                        firstName: this.state.firstName.trim(),\r\n                        lastName: this.state.lastName.trim(),\r\n                    }\r\n                })\r\n                this.setState ({\r\n                    login: true,\r\n                    email: \"\",\r\n                    password: \"\",\r\n                })\r\n                window.location.reload()\r\n            }\r\n        } \r\n        \r\n        if(this.state.login && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                const user = this.props.getUsersQuery.users.find((users) => users.email === this.state.email)\r\n                if( user.password === this.state.password) {\r\n                    this.props.pagechange(user.id);\r\n                }\r\n                // const token = jwt.sign({email: this.state.email, password: this.state.password}, \"mysecret\", {expiresIn: \"1h\"})\r\n            } else {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"Incorrect Username or Password...\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <LoginWrapper>\r\n                    <InsideHeadWrapper>{this.state.login? \"Login\" : \"Register\"}</InsideHeadWrapper>\r\n                    <form>\r\n                        {this.state.error? <span style={{color:\"red\"}}>{this.state.errorMessage}</span> : null}\r\n                        {!this.state.login? \r\n                        (<div>\r\n                            <FormWrapper>\r\n                                <label>First Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.firstName}\r\n                                    onChange={(e)=> this.setState ({ firstName: e.target.value })}\r\n                                    type=\"field\"/>\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Last Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.lastName}\r\n                                    onChange={(e)=> this.setState ({ lastName: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                        </div>) : null }\r\n                        <div>\r\n                            <FormWrapper>\r\n                                <label>Email <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.email}\r\n                                    onChange={(e)=> this.setState ({ email: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Password <br/></label>\r\n                                <PasswordMask\r\n                                    inputStyles={{textAlign:\"center\"}}\r\n                                    buttonStyles={{display:\"none\"}}\r\n                                    value={this.state.password}\r\n                                    onChange={(e)=> this.setState ({ password: e.target.value })}/>\r\n                            </FormWrapper>\r\n                        </div>\r\n                    </form>\r\n                    <div>\r\n                        <ButtonWrapper onClick={this.submitCreateAccountForm}>{this.state.login? \"Login Account\" : \"Create Account\"}</ButtonWrapper>\r\n                        <ButtonWrapper onClick={(e) => this.onClickButton(e)}>{this.state.login? \"create a new account?\" : \"login to an existing account?\"}</ButtonWrapper>\r\n                    </div>\r\n                </LoginWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getUsersQuery, {name: \"getUsersQuery\"}),\r\n    graphql(addUserMutation, {name: \"addUserMutation\"})\r\n)(Login);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport ApolloClient from 'apollo-boost';\r\nimport {ApolloProvider} from 'react-apollo';\r\n\r\n//components\r\nimport Header from '../atoms/Header';\r\nimport LoggedIn from '../atoms/LoggedIn';\r\nimport AddPost from '../atoms/AddPost';\r\nimport Divider from '../atoms/Divider';\r\nimport PostItem from  '../molecules/PostItem';\r\nimport Login from '../molecules/Login';\r\n\r\n//apollo client setup local\r\n// const client = new ApolloClient({\r\n//     uri: 'http://localhost:4000/graphql'\r\n//   })\r\n\r\n//apollo client setup heroku\r\nconst client = new ApolloClient({\r\nuri: 'https://fitbook-graphql-heroku.herokuapp.com/graphql'\r\n})\r\n\r\nconst HomepageWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(4, 1fr);\r\n    grid-template-areas: \"Head    Head    Head2    Head2\"\r\n                         \"addPost addPost addPost addPost\"\r\n                         \"Divider Divider Divider Divider\"\r\n                         \"Post    Post    Post    Post\";\r\n    height: 80px;\r\n`\r\n\r\nconst HeadWrapper = styled.div`\r\n    grid-area: Head;\r\n    align-self: center;\r\n`\r\n\r\nconst Head2Wrapper = styled.div`\r\n    grid-area: Head2;\r\n    align-self: center;\r\n`\r\n\r\nconst AddPostWrapper = styled.div`\r\n    grid-area: addPost;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    justify-self: center;\r\n`\r\n\r\nconst DividerWrapper = styled.div`\r\n    grid-area: Divider;\r\n    align-self: center;\r\n`\r\n\r\nconst PostItemWrapper = styled.div`\r\n    grid-area: Post;\r\n    justify-self: center;\r\n`\r\nclass Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedin: false,\r\n            userID: \"\",\r\n        }\r\n    }\r\n\r\n    PageChange = (userID) => {\r\n        this.setState ({\r\n            loggedin: !this.state.loggedin,\r\n        })\r\n\r\n        this.setState({\r\n            userID: userID\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                    {this.state.loggedin?\r\n                            <HomepageWrapper>\r\n                                <HeadWrapper>\r\n                                    <Header />\r\n                                </HeadWrapper>\r\n                                <Head2Wrapper>\r\n                                    <LoggedIn />\r\n                                </Head2Wrapper>\r\n                                <AddPostWrapper>\r\n                                    <AddPost userID={this.state.userID}/>\r\n                                </AddPostWrapper>\r\n                                <DividerWrapper>\r\n                                    <Divider />\r\n                                </DividerWrapper>\r\n                                <PostItemWrapper >\r\n                                    <PostItem userID={this.state.userID}/>\r\n                                </PostItemWrapper>\r\n                            </HomepageWrapper> :\r\n                            <Login pagechange={this.PageChange}/>\r\n                    }\r\n            </ApolloProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\r\n\r\nimport Homepage from './components/pages/Homepage';\r\n\r\nclass AppRouter extends Component {\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Route path=\"/\" component={Homepage} />\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AppRouter;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Homepage from './components/pages/Homepage'\r\nimport AppRouter from './AppRouter';\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById('root'));"],"sourceRoot":""}