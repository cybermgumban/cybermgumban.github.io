{"version":3,"sources":["assets/imgplaceholder.png","components/atoms/Header.js","components/atoms/LoggedIn.js","queries/queries.js","components/atoms/AddPost.js","components/atoms/Divider.js","components/atoms/PicIcon.js","components/atoms/Name.js","components/atoms/Post.js","components/atoms/AddComment.js","components/molecules/CommentItem.js","components/molecules/PostItem.js","components/pages/Loginpage.js","components/pages/Homepage.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderWrapper","styled","div","_templateObject","InsideHeadWrapper","h1","_templateObject2","Header","props","react_default","a","createElement","LoggedInWrapper","LoggedIn_templateObject","InnerWrapper","LoggedIn_templateObject2","LabelWrapper","_templateObject3","LoggedIn","Component","getUsersQuery","gql","queries_templateObject","addUserMutation","queries_templateObject2","queries_templateObject3","_templateObject4","addPostMutation","_templateObject5","addPostCommentMutation","_templateObject6","getPostQuery","_templateObject7","_templateObject8","InputWrapper","input","AddPost_templateObject","ButtonWrapper","button","AddPost_templateObject2","AddPost","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","newpost","e","today","Date","preventDefault","variables","userID","datePublished","getDate","getMonth","getFullYear","content","refetchQueries","query","id","setState","_this2","onSubmit","submitForm","value","onChange","target","placeholder","onClick","compose","graphql","name","HrWrapper","hr","Divider_templateObject","Divider","DivWrapper","PicIcon_templateObject","PicIconWrapper","img","PicIcon_templateObject2","PicIcon","height","newht","src","imgplaceholder","NameWrapper","Name_templateObject","Name","names","firstName","user","lastName","PostWrapper","span","Post_templateObject","Post","inside","postcomment","comment","CommentWrapper","form","AddComment_templateObject","label","AddComment_templateObject2","AddComment_templateObject3","AddComment","newcomment","postID","post","dateComment","AddComment_LabelWrapper","AddComment_InputWrapper","buttonClick","CommentItemWrapper","CommentItem_templateObject","PostItem","comments","map","index","key","atoms_PicIcon","atoms_Name","atoms_Post","atoms_Divider","displayComments","PostItemWrapper","PostItem_templateObject","data","loading","posts","atoms_AddComment","CommentItem","postcomments","displayPosts","options","LoginWrapper","Loginpage_templateObject","Loginpage_templateObject2","Loginpage_templateObject3","Loginpage_templateObject4","FormWrapper","Loginpage_templateObject5","Login","login","email","password","error","errorMessage","submitCreateAccountForm","users","find","trim","dateRegistered","window","location","reload","pagechange","atoms_Header","Loginpage_InsideHeadWrapper","style","color","Loginpage_InputWrapper","type","Loginpage_ButtonWrapper","onClickButton","client","ApolloClient","uri","HomepageWrapper","Homepage_templateObject","HeadWrapper","Homepage_templateObject2","Head2Wrapper","Homepage_templateObject3","AddPostWrapper","Homepage_templateObject4","DividerWrapper","Homepage_templateObject5","Homepage_templateObject6","Homepage","PageChange","loggedin","react_apollo_esm","atoms_LoggedIn","atoms_AddPost","Homepage_PostItemWrapper","molecules_PostItem","Loginpage","ReactDOM","render","pages_Homepage","document","getElementById"],"mappings":"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","file":"static/js/main.bdc5db06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgplaceholder.0ee8c1d1.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\n// import Login from './Login';\r\n\r\nconst HeaderWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n    justify-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.h1`\r\n    margin-left: 20px;\r\n    color: white;\r\n`\r\nconst Header = (props) =>{\r\n    return (\r\n            <HeaderWrapper>\r\n                <InsideHeadWrapper>Fitbook</InsideHeadWrapper>\r\n            </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\n\r\nconst LoggedInWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n`\r\n\r\nconst InnerWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: row;\r\n    align-self: center;\r\n    justify-content: right;\r\n`\r\n\r\nconst LabelWrapper = styled.p`\r\n    margin-right: 40px;\r\n    color: white;\r\n`\r\n\r\nclass LoggedIn extends Component{\r\n    render () {\r\n        return (\r\n            <LoggedInWrapper>\r\n                <InnerWrapper>\r\n                    <LabelWrapper>Logout</LabelWrapper>\r\n                </InnerWrapper>\r\n            </LoggedInWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoggedIn;","import {gql} from 'apollo-boost';\r\n\r\nconst getUsersQuery = gql`\r\n    {\r\n        users {\r\n            id\r\n            email\r\n            password\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostsQuery = gql`\r\n    {\r\n        posts {\r\n            id\r\n            userID\r\n            datePublished\r\n            content\r\n            user{\r\n                id\r\n                firstName\r\n                lastName\r\n            }\r\n            postcomments{\r\n                id\r\n                comment\r\n                user{\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst addAuthUserMutation = gql`\r\n    mutation($userID: ID!, $token: String!, $tokenExpiration: Int!) {\r\n        addUser(userID: $userID, token: $token, tokenExpiration: $tokenExpiration){\r\n            userID\r\n            token\r\n            tokenExpiration\r\n        }\r\n    }\r\n`\r\n\r\nconst addUserMutation = gql`\r\n    mutation($email: String!, $password: String!, $dateRegistered: String!, $firstName: String!, $lastName: String!) {\r\n        addUser(email: $email, password: $password, dateRegistered: $dateRegistered, firstName: $firstName, lastName: $lastName){\r\n            email\r\n            password\r\n            dateRegistered\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostMutation = gql`\r\n    mutation($userID: ID!, $datePublished: String!, $content: String!) {\r\n        addPost(userID: $userID, datePublished: $datePublished, content: $content){\r\n            userID\r\n            datePublished\r\n            content\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostCommentMutation = gql`\r\n    mutation($postID: ID!, $userID: ID!, $comment: String!, $dateComment: String!) {\r\n        addPostComment(postID: $postID, userID: $userID, comment: $comment, dateComment: $dateComment){\r\n            postID\r\n            userID\r\n            comment\r\n            dateComment\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostStatMutation = gql`\r\n    mutation($postID: String!, $likeCount: Number!) {\r\n        addPostStat(postID: $postID, likeCount: $likeCount){\r\n            postID\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostQuery = gql`\r\n    query($id: ID){\r\n        user(id: $id){\r\n            posts {\r\n                id\r\n                userID\r\n                datePublished\r\n                content\r\n                postcomments {\r\n                    id\r\n                    postID\r\n                    userID\r\n                    comment\r\n                    dateComment\r\n                    user {\r\n                        firstName\r\n                        lastName\r\n                    }\r\n                }\r\n                poststat {\r\n                    id\r\n                    postID\r\n                    likeCount\r\n                }\r\n                user {\r\n                    firstName\r\n                    lastName\r\n                    dateRegistered\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport { getUsersQuery, \r\n         getPostsQuery, \r\n         addAuthUserMutation,\r\n         addUserMutation, \r\n         addPostMutation, \r\n         addPostCommentMutation, \r\n         addPostStatMutation, \r\n         getPostQuery };","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostMutation } from '../../queries/queries';\r\n\r\nconst InputWrapper = styled.input`\r\n    height: 30px;\r\n    width: 50vw;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 3px;\r\n`\r\n\r\nclass AddPost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newpost: '',\r\n        }\r\n    }\r\n\r\n    submitForm(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostMutation({\r\n            variables: {\r\n                userID: this.props.userID,\r\n                datePublished: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                content: this.state.newpost\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.userID\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newpost: '',\r\n        })\r\n\r\n    }\r\n\r\n     render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={(e) => this.submitForm(e)}>\r\n                    <InputWrapper \r\n                    value={this.state.newpost}\r\n                    onChange={(e) => this.setState ({newpost: e.target.value})}\r\n                    placeholder=\"What fitness task did you do today?\" />\r\n                </form>\r\n                <ButtonWrapper onClick={(e) => this.submitForm(e)}>Submit</ButtonWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostMutation, {name: \"addPostMutation\"})\r\n)(AddPost);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HrWrapper = styled.hr`\r\n    border-top: 1px;\r\n    border-color: #DCDCDC;\r\n`\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <HrWrapper />\r\n    )\r\n}\r\n\r\nexport default Divider;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport imgplaceholder from '../../assets/imgplaceholder.png';\r\n\r\nconst DivWrapper = styled.div`\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n`\r\n\r\nconst PicIconWrapper = styled.img`\r\n    width: auto;\r\n    border: 1px solid rgb(192,192,192);\r\n    border-radius: 50%;\r\n`\r\n\r\nclass PicIcon extends Component{\r\n    render() {\r\n        return (\r\n            <DivWrapper>\r\n                <PicIconWrapper height={this.props.newht}src={imgplaceholder}/>\r\n            </DivWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PicIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NameWrapper = styled.div`\r\n    margin-left: 10px;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    display: inline-block;\r\n`\r\n\r\nconst Name = (props) => {\r\n        return (\r\n            <NameWrapper>\r\n                <span>\r\n                    {props.names? props.names.firstName : props.user.firstName}\r\n                </span>\r\n                <span>\r\n                    &nbsp;\r\n                </span>\r\n                <span>\r\n                    {props.names? props.names.lastName : props.user.lastName}\r\n                </span>\r\n            </NameWrapper>\r\n        )\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PostWrapper = styled.span`\r\n    font-size: 12px;\r\n    margin-top: 5x;\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nclass Post extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PostWrapper>\r\n                    {this.props.inside? this.props.inside : this.props.postcomment.comment }\r\n                </PostWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostCommentMutation } from '../../queries/queries';\r\n\r\nconst CommentWrapper = styled.form`\r\n    margin-top: 10px;\r\n    font-size: 12px;\r\n`\r\n\r\nconst LabelWrapper = styled.label`\r\n    display: block;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    width: 700px;\r\n    height: 30px;\r\n    display: block;\r\n    //resize: vertical;\r\n`\r\n\r\nclass AddComment extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newcomment: '',\r\n        }\r\n    }\r\n\r\n    buttonClick(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostCommentMutation({\r\n            variables: {\r\n                postID: this.props.post.id,\r\n                userID: this.props.post.userID,\r\n                dateComment: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                comment: this.state.newcomment\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.post.userID,\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newcomment: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CommentWrapper onSubmit={(e) => e.preventDefault()}>\r\n                    <LabelWrapper>Comment</LabelWrapper>\r\n                    <InputWrapper \r\n                    value={this.state.newcomment}\r\n                    onChange={(e) => this.setState ({newcomment: e.target.value})}\r\n                    placeholder=\"Enter comment here...\"></InputWrapper>\r\n                </CommentWrapper>\r\n                <button onClick={(e) => this.buttonClick(e)}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostCommentMutation, {name: \"addPostCommentMutation\"})\r\n)(AddComment);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport Divider from '../atoms/Divider';\r\n\r\nconst CommentItemWrapper = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n\r\n    displayComments(){\r\n        \r\n        const comments = this.props.comments;\r\n\r\n        return (\r\n            comments.map ((comment, index) =>   \r\n                <CommentItemWrapper key={index}>\r\n                    <div>\r\n                        <PicIcon newht={\"25px\"}/>\r\n                        <Name user={comment.user}/>\r\n                    </div>\r\n                    <div>\r\n                        <Post postcomment={comment}/>\r\n                        <Divider />\r\n                    </div>\r\n                </CommentItemWrapper>\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayComments()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql} from 'react-apollo';\r\nimport { getPostQuery } from '../../queries/queries';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport AddComment from '../atoms/AddComment';\r\nimport Divider from '../atoms/Divider';\r\nimport CommentItem from './CommentItem';\r\n\r\nconst PostItemWrapper = styled.div`\r\n    margin-bottom: 60px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n    displayPosts() {\r\n        const data = this.props.data;\r\n        \r\n        if(data.loading) {\r\n            return (\r\n                <div>Loading Posts...</div>\r\n            )\r\n        } else {\r\n                return data.user.posts.map((post,index) => {\r\n                    return (\r\n                            <PostItemWrapper key={index}>\r\n                                <div>\r\n                                    <PicIcon newht={\"50px\"}/>\r\n                                    <Name names={post.user}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Post inside={post.content}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <AddComment post={post}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <CommentItem comments={post.postcomments}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Divider />\r\n                                </div>\r\n                            </PostItemWrapper>\r\n                    )\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayPosts()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default graphql(getPostQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.userID\r\n            }\r\n        }\r\n    }\r\n})(PostItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getUsersQuery, addUserMutation } from '../../queries/queries';\r\n// import jwt from 'jsonwebtoken';\r\n\r\nimport Header from '../atoms/Header'\r\n\r\nconst LoginWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    margin-right: 20px;\r\n    color: black;\r\n    align-items: center;\r\n    text-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.span`\r\n    display: flex;\r\n    font-weight: bold;\r\n    margin: 20px 0;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    text-align: center;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 10px;\r\n`\r\n\r\nconst FormWrapper = styled.div`\r\n    margin-top: 5px;\r\n`\r\n\r\nclass Login extends Component{\r\n    state = {\r\n        login: true,\r\n        email: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n    }\r\n\r\n    onClickButton(e) {\r\n        e.preventDefault();\r\n        this.setState({\r\n            login: !this.state.login,\r\n        })\r\n    }\r\n\r\n    submitCreateAccountForm = (e) => {\r\n        const today = new Date();\r\n        e.preventDefault();\r\n\r\n        if(!this.state.login && this.state.firstName && this.state.lastName && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"User already exists!\"\r\n                })\r\n            } else { \r\n                this.props.addUserMutation({\r\n                    variables: {\r\n                        email: this.state.email.trim(),\r\n                        password: this.state.password.trim(),\r\n                        dateRegistered: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                        firstName: this.state.firstName.trim(),\r\n                        lastName: this.state.lastName.trim(),\r\n                    }\r\n                })\r\n                this.setState ({\r\n                    login: true,\r\n                    email: \"\",\r\n                    password: \"\",\r\n                })\r\n                window.location.reload()\r\n            }\r\n        } \r\n        \r\n        if(this.state.login && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                const user = this.props.getUsersQuery.users.find((users) => users.email === this.state.email)\r\n                if( user.password === this.state.password) {\r\n                    this.props.pagechange(user.id);\r\n                }\r\n                // const token = jwt.sign({email: this.state.email, password: this.state.password}, \"mysecret\", {expiresIn: \"1h\"})\r\n            } else {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"Incorrect Username or Password...\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <LoginWrapper>\r\n                    <InsideHeadWrapper>{this.state.login? \"Login\" : \"Register\"}</InsideHeadWrapper>\r\n                    <form>\r\n                        {this.state.login? (this.state.error? <span style={{color:\"red\"}}>{this.state.errorMessage}</span> : null) : null}\r\n                        {!this.state.login? \r\n                        (<div>\r\n                            <FormWrapper>\r\n                                <label>First Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.firstName}\r\n                                    onChange={(e)=> this.setState ({ firstName: e.target.value })}\r\n                                    type=\"field\"/>\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Last Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.lastName}\r\n                                    onChange={(e)=> this.setState ({ lastName: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                        </div>) : null }\r\n                        <div>\r\n                            <FormWrapper>\r\n                                <label>Email <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.email}\r\n                                    onChange={(e)=> this.setState ({ email: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Password <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.password}\r\n                                    onChange={(e)=> this.setState ({ password: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                        </div>\r\n                    </form>\r\n                    <div>\r\n                        <ButtonWrapper onClick={this.submitCreateAccountForm}>{this.state.login? \"Login Account\" : \"Create Account\"}</ButtonWrapper>\r\n                        <ButtonWrapper onClick={(e) => this.onClickButton(e)}>{this.state.login? \"create a new account?\" : \"login to an existing account?\"}</ButtonWrapper>\r\n                    </div>\r\n                </LoginWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getUsersQuery, {name: \"getUsersQuery\"}),\r\n    graphql(addUserMutation, {name: \"addUserMutation\"})\r\n)(Login);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport ApolloClient from 'apollo-boost';\r\nimport {ApolloProvider} from 'react-apollo';\r\n\r\n//components\r\nimport Header from '../atoms/Header';\r\nimport LoggedIn from '../atoms/LoggedIn';\r\nimport AddPost from '../atoms/AddPost';\r\nimport Divider from '../atoms/Divider';\r\nimport PostItem from  '../molecules/PostItem';\r\nimport Loginpage from '../pages/Loginpage'\r\n\r\n//apollo client setup\r\nconst client = new ApolloClient({\r\n    uri: 'http://localhost:4000/graphql'\r\n  })\r\n\r\nconst HomepageWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(4, 1fr);\r\n    grid-template-areas: \"Head    Head    Head2    Head2\"\r\n                         \"addPost addPost addPost addPost\"\r\n                         \"Divider Divider Divider Divider\"\r\n                         \"Post    Post    Post    Post\";\r\n    height: 80px;\r\n`\r\n\r\nconst HeadWrapper = styled.div`\r\n    grid-area: Head;\r\n    align-self: center;\r\n`\r\n\r\nconst Head2Wrapper = styled.div`\r\n    grid-area: Head2;\r\n    align-self: center;\r\n`\r\n\r\nconst AddPostWrapper = styled.div`\r\n    grid-area: addPost;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    justify-self: center;\r\n`\r\n\r\nconst DividerWrapper = styled.div`\r\n    grid-area: Divider;\r\n    align-self: center;\r\n`\r\n\r\nconst PostItemWrapper = styled.div`\r\n    grid-area: Post;\r\n    justify-self: center;\r\n`\r\nclass Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedin: false,\r\n            userID: \"\",\r\n        }\r\n    }\r\n\r\n    PageChange = (userID) => {\r\n        this.setState ({\r\n            loggedin: !this.state.loggedin,\r\n        })\r\n\r\n        this.setState({\r\n            userID: userID\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                    {this.state.loggedin?\r\n                        <HomepageWrapper>\r\n                            <HeadWrapper>\r\n                                <Header />\r\n                            </HeadWrapper>\r\n                            <Head2Wrapper>\r\n                                <LoggedIn />\r\n                            </Head2Wrapper>\r\n                            <AddPostWrapper>\r\n                                <AddPost userID={this.state.userID}/>\r\n                            </AddPostWrapper>\r\n                            <DividerWrapper>\r\n                                <Divider />\r\n                            </DividerWrapper>\r\n                            <PostItemWrapper >\r\n                                <PostItem userID={this.state.userID}/>\r\n                            </PostItemWrapper>\r\n                        </HomepageWrapper> :\r\n                        <Loginpage pagechange={this.PageChange}/>\r\n                    }\r\n            </ApolloProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Homepage from './components/pages/Homepage';\r\n// import Login from './components/pages/Loginpage';\r\n\r\nReactDOM.render(<Homepage />, document.getElementById('root'));"],"sourceRoot":""}