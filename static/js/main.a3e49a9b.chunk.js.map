{"version":3,"sources":["assets/imgplaceholder.png","components/atoms/Header.js","components/atoms/LoggedIn.js","queries/queries.js","components/atoms/AddFriend.js","components/atoms/AddPost.js","components/atoms/Divider.js","components/atoms/PicIcon.js","components/atoms/Name.js","components/atoms/Post.js","components/atoms/AddComment.js","components/molecules/CommentItem.js","components/molecules/PostItem.js","components/molecules/Login.js","components/pages/Homepage.js","index.js"],"names":["module","exports","__webpack_require__","p","HeaderWrapper","styled","div","_templateObject","InsideHeadWrapper","h1","_templateObject2","Header","props","react_default","a","createElement","LoggedInWrapper","LoggedIn_templateObject","InnerWrapper","LoggedIn_templateObject2","ButtonWrapper","button","_templateObject3","LoggedIn","onClick","window","location","reload","Component","getUsersQuery","gql","queries_templateObject","addUserMutation","queries_templateObject2","queries_templateObject3","_templateObject4","addPostMutation","_templateObject5","addPostCommentMutation","_templateObject6","addFriendMutation","_templateObject7","_templateObject8","getPostQuery","_templateObject9","AddFriend","e","preventDefault","this","variables","userID","friendsID","target","value","_this","users","map","user","key","id","firstName","lastName","onAddFriendClick","compose","graphql","name","InputWrapper","input","AddPost_templateObject","AddPost_templateObject2","AddPost","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","newpost","today","Date","datePublished","getDate","getMonth","getFullYear","content","refetchQueries","query","setState","_this2","onSubmit","submitForm","onChange","placeholder","AddPost_ButtonWrapper","HrWrapper","hr","Divider_templateObject","Divider","DivWrapper","PicIcon_templateObject","PicIconWrapper","img","PicIcon_templateObject2","PicIcon","height","newht","src","imgplaceholder","NameWrapper","Name_templateObject","Name","names","PostWrapper","span","Post_templateObject","Post","inside","postcomment","comment","CommentWrapper","form","AddComment_templateObject","LabelWrapper","label","AddComment_templateObject2","AddComment_templateObject3","AddComment","newcomment","postID","post","dateComment","AddComment_InputWrapper","buttonClick","CommentItemWrapper","CommentItem_templateObject","PostItem","comments","index","atoms_PicIcon","atoms_Name","atoms_Post","atoms_Divider","displayComments","PostItemWrapper","PostItem_templateObject","data","loading","posts","atoms_AddComment","CommentItem","postcomments","displayPosts","options","LoginWrapper","Login_templateObject","Login_templateObject2","Login_templateObject3","Login_templateObject4","FormWrapper","Login_templateObject5","Login","login","email","password","error","errorMessage","submitCreateAccountForm","find","test","trim","dateRegistered","pagechange","friendlists","atoms_Header","Login_InsideHeadWrapper","style","color","Login_InputWrapper","type","passwordMask_min_default","inputStyles","textAlign","buttonStyles","display","Login_ButtonWrapper","onClickButton","client","ApolloClient","uri","HomepageWrapper","Homepage_templateObject","HeadWrapper","Homepage_templateObject2","Head2Wrapper","Homepage_templateObject3","AddFriendWrapper","Homepage_templateObject4","AddPostWrapper","Homepage_templateObject5","DividerWrapper","Homepage_templateObject6","Homepage_templateObject7","Homepage","PageChange","friendLists","loggedin","react_apollo_esm","atoms_LoggedIn","atoms_AddFriend","atoms_AddPost","Homepage_PostItemWrapper","molecules_PostItem","molecules_Login","ReactDOM","render","pages_Homepage","document","getElementById"],"mappings":"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","file":"static/js/main.a3e49a9b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/imgplaceholder.0ee8c1d1.png\";","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\n// import Login from './Login';\r\n\r\nconst HeaderWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n    justify-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.h1`\r\n    margin-left: 20px;\r\n    color: white;\r\n`\r\nconst Header = (props) =>{\r\n    return (\r\n            <HeaderWrapper>\r\n                <InsideHeadWrapper>\r\n                    Fitbook\r\n                </InsideHeadWrapper>\r\n            </HeaderWrapper>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\n\r\nconst LoggedInWrapper = styled.div`\r\n    display: inline-block;\r\n    width: 100%;\r\n    height: 80px;\r\n    background-color: rgb(0, 153, 51);\r\n`\r\n\r\nconst InnerWrapper = styled.div`\r\n    display: block;\r\n    text-align: right;\r\n    margin-top: 30px;\r\n    color: white;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    all: unset;\r\n    margin-right: 40px;\r\n    color: white;\r\n    :hover {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nclass LoggedIn extends Component{\r\n    render () {\r\n        return (\r\n            <LoggedInWrapper>\r\n                <InnerWrapper>\r\n                        <ButtonWrapper onClick={() => window.location.reload()}>Logout</ButtonWrapper>\r\n                </InnerWrapper>\r\n            </LoggedInWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoggedIn;","import {gql} from 'apollo-boost';\r\n\r\nconst getUsersQuery = gql`\r\n    {\r\n        users {\r\n            id\r\n            email\r\n            password\r\n            firstName\r\n            lastName\r\n            friendlists {\r\n                friendsID\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostsQuery = gql`\r\n    {\r\n        posts {\r\n            id\r\n            userID\r\n            datePublished\r\n            content\r\n            user{\r\n                id\r\n                firstName\r\n                lastName\r\n            }\r\n            postcomments{\r\n                id\r\n                comment\r\n                user{\r\n                    id\r\n                    firstName\r\n                    lastName\r\n                }\r\n            }\r\n            poststat {\r\n                id\r\n                postID\r\n                likeCount\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nconst addAuthUserMutation = gql`\r\n    mutation($userID: ID!, $token: String!, $tokenExpiration: Int!) {\r\n        addUser(userID: $userID, token: $token, tokenExpiration: $tokenExpiration){\r\n            userID\r\n            token\r\n            tokenExpiration\r\n        }\r\n    }\r\n`\r\n\r\nconst addUserMutation = gql`\r\n    mutation($email: String!, $password: String!, $dateRegistered: String!, $firstName: String!, $lastName: String!) {\r\n        addUser(email: $email, password: $password, dateRegistered: $dateRegistered, firstName: $firstName, lastName: $lastName){\r\n            email\r\n            password\r\n            dateRegistered\r\n            firstName\r\n            lastName\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostMutation = gql`\r\n    mutation($userID: ID!, $datePublished: String!, $content: String!) {\r\n        addPost(userID: $userID, datePublished: $datePublished, content: $content){\r\n            userID\r\n            datePublished\r\n            content\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostCommentMutation = gql`\r\n    mutation($postID: ID!, $userID: ID!, $comment: String!, $dateComment: String!) {\r\n        addPostComment(postID: $postID, userID: $userID, comment: $comment, dateComment: $dateComment){\r\n            postID\r\n            userID\r\n            comment\r\n            dateComment\r\n        }\r\n    }\r\n`\r\n\r\nconst addPostStatMutation = gql`\r\n    mutation($postID: ID!, $likeCount: Number!) {\r\n        addPostStat(postID: $postID, likeCount: $likeCount){\r\n            postID\r\n            likeCount\r\n        }\r\n    }\r\n`\r\n\r\nconst addFriendMutation = gql`\r\n    mutation($userID: ID!, $friendsID: ID!) {\r\n        addFriend(userID: $userID, friendsID: $friendsID){\r\n            userID\r\n            friendsID\r\n        }\r\n    }\r\n`\r\n\r\nconst getPostQuery = gql`\r\n    query($id: ID){\r\n        user(id: $id){\r\n            posts {\r\n                id\r\n                userID\r\n                datePublished\r\n                content\r\n                postcomments {\r\n                    id\r\n                    postID\r\n                    userID\r\n                    comment\r\n                    dateComment\r\n                    user {\r\n                        firstName\r\n                        lastName\r\n                    }\r\n                }\r\n                poststat {\r\n                    id\r\n                    postID\r\n                    likeCount\r\n                }\r\n                user {\r\n                    firstName\r\n                    lastName\r\n                    dateRegistered\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\nexport { getUsersQuery, \r\n         getPostsQuery, \r\n         addAuthUserMutation,\r\n         addUserMutation, \r\n         addPostMutation, \r\n         addPostCommentMutation, \r\n         addPostStatMutation,\r\n         addFriendMutation, \r\n         getPostQuery };","import React from 'react';\r\nimport {Component} from 'react';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { addFriendMutation, getUsersQuery } from '../../queries/queries';\r\n\r\nclass AddFriend extends Component {\r\n    \r\n    onAddFriendClick(e) {\r\n        e.preventDefault(); \r\n        this.props.addFriendMutation({\r\n            variables: {\r\n                userID: this.props.userID,\r\n                friendsID: e.target.value,\r\n            },\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            this.props.getUsersQuery.users.map((user) => {\r\n                return (\r\n                    <div key={user.id}>\r\n                        <p>{user.firstName} {user.lastName}</p>\r\n                        <button value={user.id} onClick={(e) => this.onAddFriendClick(e)}>Add Friend</button>\r\n                    </div>\r\n                )\r\n            })\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addFriendMutation, {name: \"addFriendMutation\"}),\r\n    graphql(getUsersQuery, {name: \"getUsersQuery\"})\r\n)(AddFriend);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostMutation } from '../../queries/queries';\r\n\r\nconst InputWrapper = styled.input`\r\n    height: 30px;\r\n    width: 50vw;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 3px;\r\n`\r\n\r\nclass AddPost extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newpost: '',\r\n        }\r\n    }\r\n\r\n    submitForm(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostMutation({\r\n            variables: {\r\n                userID: this.props.userID,\r\n                datePublished: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                content: this.state.newpost\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.userID\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newpost: '',\r\n        })\r\n\r\n    }\r\n\r\n     render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={(e) => this.submitForm(e)}>\r\n                    <InputWrapper \r\n                    value={this.state.newpost}\r\n                    onChange={(e) => this.setState ({newpost: e.target.value})}\r\n                    placeholder=\"What fitness task did you do today?\" />\r\n                </form>\r\n                <ButtonWrapper onClick={(e) => this.submitForm(e)}>Submit</ButtonWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostMutation, {name: \"addPostMutation\"})\r\n)(AddPost);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst HrWrapper = styled.hr`\r\n    border-top: 1px;\r\n    border-color: #DCDCDC;\r\n`\r\n\r\nconst Divider = () => {\r\n    return (\r\n        <HrWrapper />\r\n    )\r\n}\r\n\r\nexport default Divider;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport imgplaceholder from '../../assets/imgplaceholder.png';\r\n\r\nconst DivWrapper = styled.div`\r\n    display: inline-block;\r\n    vertical-align: middle;\r\n`\r\n\r\nconst PicIconWrapper = styled.img`\r\n    width: auto;\r\n    border: 1px solid rgb(192,192,192);\r\n    border-radius: 50%;\r\n`\r\n\r\nclass PicIcon extends Component{\r\n    render() {\r\n        return (\r\n            <DivWrapper>\r\n                <PicIconWrapper height={this.props.newht}src={imgplaceholder}/>\r\n            </DivWrapper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PicIcon;","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst NameWrapper = styled.div`\r\n    margin-left: 10px;\r\n    font-size: 12px;\r\n    font-weight: bold;\r\n    display: inline-block;\r\n`\r\n\r\nconst Name = (props) => {\r\n        return (\r\n            <NameWrapper>\r\n                <span>\r\n                    {props.names? props.names.firstName : props.user.firstName}\r\n                </span>\r\n                <span>\r\n                    &nbsp;\r\n                </span>\r\n                <span>\r\n                    {props.names? props.names.lastName : props.user.lastName}\r\n                </span>\r\n            </NameWrapper>\r\n        )\r\n}\r\n\r\nexport default Name;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst PostWrapper = styled.span`\r\n    font-size: 12px;\r\n    margin-top: 5x;\r\n    margin-right: 5px;\r\n    margin-bottom: 5px;\r\n`\r\n\r\nclass Post extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <PostWrapper>\r\n                    {this.props.inside? this.props.inside : this.props.postcomment.comment }\r\n                </PostWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Post;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getPostQuery, addPostCommentMutation } from '../../queries/queries';\r\n\r\nconst CommentWrapper = styled.form`\r\n    margin-top: 10px;\r\n    font-size: 12px;\r\n`\r\n\r\nconst LabelWrapper = styled.label`\r\n    display: block;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    width: 700px;\r\n    height: 30px;\r\n    display: block;\r\n    //resize: vertical;\r\n`\r\n\r\nclass AddComment extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            newcomment: '',\r\n        }\r\n    }\r\n\r\n    buttonClick(e) {\r\n        const today = new Date();\r\n        e.preventDefault(); \r\n        this.props.addPostCommentMutation({\r\n            variables: {\r\n                postID: this.props.post.id,\r\n                userID: this.props.post.userID,\r\n                dateComment: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                comment: this.state.newcomment\r\n            },\r\n            refetchQueries: [{\r\n                query: getPostQuery,\r\n                variables: {\r\n                    id: this.props.post.userID,\r\n                }\r\n            }]\r\n        })\r\n        this.setState ({\r\n            newcomment: '',\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <CommentWrapper onSubmit={(e) => e.preventDefault()}>\r\n                    <LabelWrapper>Comment</LabelWrapper>\r\n                    <InputWrapper \r\n                    value={this.state.newcomment}\r\n                    onChange={(e) => this.setState ({newcomment: e.target.value})}\r\n                    placeholder=\"Enter comment here...\"></InputWrapper>\r\n                </CommentWrapper>\r\n                <button onClick={(e) => this.buttonClick(e)}>Submit</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(addPostCommentMutation, {name: \"addPostCommentMutation\"})\r\n)(AddComment);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport Divider from '../atoms/Divider';\r\n\r\nconst CommentItemWrapper = styled.div`\r\n    padding: 10px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n\r\n    displayComments(){\r\n        \r\n        const comments = this.props.comments;\r\n\r\n        return (\r\n            comments.map ((comment, index) =>   \r\n                <CommentItemWrapper key={index}>\r\n                    <div>\r\n                        <PicIcon newht={\"25px\"}/>\r\n                        <Name user={comment.user}/>\r\n                    </div>\r\n                    <div>\r\n                        <Post postcomment={comment}/>\r\n                        <Divider />\r\n                    </div>\r\n                </CommentItemWrapper>\r\n            )\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayComments()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostItem;","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport {graphql} from 'react-apollo';\r\nimport { getPostsQuery, getPostQuery } from '../../queries/queries';\r\n\r\n//components\r\nimport PicIcon from '../atoms/PicIcon';\r\nimport Name from '../atoms/Name';\r\nimport Post from '../atoms/Post';\r\nimport AddComment from '../atoms/AddComment';\r\nimport Divider from '../atoms/Divider';\r\nimport CommentItem from './CommentItem';\r\n\r\nconst PostItemWrapper = styled.div`\r\n    margin-bottom: 60px;\r\n`\r\n\r\nclass PostItem extends Component {\r\n    displayPosts() {\r\n        const data = this.props.data;\r\n\r\n        // if(data.posts !== undefined) {\r\n        //         const newdata = data.posts.filter((element) => {\r\n        //             return element.userID === this.props.userID\r\n        //         })\r\n        //         console.log(\"!@newdata\", newdata)\r\n        // }\r\n\r\n        if(data.loading) {\r\n            return (\r\n                <div>Loading Posts...</div>\r\n            )\r\n        } else {\r\n                return data.user.posts.map((post,index) => {\r\n                    return (\r\n                            <PostItemWrapper key={index}>\r\n                                <div>\r\n                                    <PicIcon newht={\"50px\"}/>\r\n                                    <Name names={post.user}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Post inside={post.content}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <AddComment post={post}/>\r\n                                    <Divider />\r\n                                </div>\r\n                                <div>\r\n                                    <CommentItem comments={post.postcomments}/>\r\n                                </div>\r\n                                <div>\r\n                                    <Divider />\r\n                                </div>\r\n                            </PostItemWrapper>\r\n                    )\r\n                })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.displayPosts()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default graphql(getPostQuery, {\r\n    options: (props) => {\r\n        return {\r\n            variables: {\r\n                id: props.userID\r\n        }}\r\n    }\r\n// export default graphql(getPostsQuery, {\r\n})(PostItem);","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport {Component} from 'react';\r\nimport {graphql, compose} from 'react-apollo';\r\nimport { getUsersQuery, addUserMutation } from '../../queries/queries';\r\nimport PasswordMask from 'react-password-mask';\r\n// import jwt from 'jsonwebtoken';\r\n\r\nimport Header from '../atoms/Header'\r\n\r\nconst LoginWrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    color: white;\r\n    margin-right: 20px;\r\n    color: black;\r\n    align-items: center;\r\n    text-align: center;\r\n`\r\n\r\nconst InsideHeadWrapper = styled.span`\r\n    display: flex;\r\n    font-weight: bold;\r\n    margin: 20px 0;\r\n`\r\n\r\nconst InputWrapper = styled.input`\r\n    text-align: center;\r\n`\r\n\r\nconst ButtonWrapper = styled.button`\r\n    margin-top: 10px;\r\n`\r\n\r\nconst FormWrapper = styled.div`\r\n    margin-top: 5px;\r\n`\r\n\r\nclass Login extends Component{\r\n    state = {\r\n        login: true,\r\n        email: \"\",\r\n        password: \"\",\r\n        firstName: \"\",\r\n        lastName: \"\",\r\n        error: false,\r\n        errorMessage: \"\",\r\n    }\r\n\r\n    onClickButton(e) {\r\n        e.preventDefault();\r\n        this.setState({\r\n            login: !this.state.login,\r\n            error: true,\r\n            errorMessage: \"\",\r\n        }, () => null)\r\n    }\r\n\r\n    submitCreateAccountForm = (e) => {\r\n        const regex = /^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/;\r\n        const today = new Date();\r\n        e.preventDefault();\r\n\r\n        if(!this.state.login && this.state.firstName && this.state.lastName && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"User already exists!\"\r\n                })\r\n            } \r\n            else if (regex.test(this.state.email) === false) {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"Invalid Email Address!\"\r\n                })\r\n            }\r\n            else { \r\n                this.props.addUserMutation({\r\n                    variables: {\r\n                        email: this.state.email.trim(),\r\n                        password: this.state.password.trim(),\r\n                        dateRegistered: today.getDate() + \"/\" + today.getMonth() + \"/\" + today.getFullYear(),\r\n                        firstName: this.state.firstName.trim(),\r\n                        lastName: this.state.lastName.trim(),\r\n                    }\r\n                })\r\n                this.setState ({\r\n                    login: true,\r\n                    email: \"\",\r\n                    password: \"\",\r\n                })\r\n                window.location.reload()\r\n            }\r\n        } \r\n        \r\n        if(this.state.login && this.state.email && this.state.password) {\r\n            if (this.props.getUsersQuery.users.find((users) => users.email === this.state.email)) {\r\n                const user = this.props.getUsersQuery.users.find((users) => users.email === this.state.email)\r\n                if( user.password === this.state.password) {\r\n                    this.props.pagechange(user.id, user.friendlists);\r\n                } else {\r\n                    this.setState ({\r\n                        error: true,\r\n                        errorMessage: \"Incorrect Password...\"\r\n                    })\r\n                }\r\n                // const token = jwt.sign({email: this.state.email, password: this.state.password}, \"mysecret\", {expiresIn: \"1h\"})\r\n            } else {\r\n                this.setState ({\r\n                    error: true,\r\n                    errorMessage: \"Incorrect Username...\"\r\n                })\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Header />\r\n                <LoginWrapper>\r\n                    <InsideHeadWrapper>{this.state.login? \"Login\" : \"Register\"}</InsideHeadWrapper>\r\n                    <form>\r\n                        {this.state.error? <span style={{color:\"red\"}}>{this.state.errorMessage}</span> : null}\r\n                        {!this.state.login? \r\n                        (<div>\r\n                            <FormWrapper>\r\n                                <label>First Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.firstName}\r\n                                    onChange={(e)=> this.setState ({ firstName: e.target.value })}\r\n                                    type=\"field\"/>\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Last Name <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.lastName}\r\n                                    onChange={(e)=> this.setState ({ lastName: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                        </div>) : null }\r\n                        <div>\r\n                            <FormWrapper>\r\n                                <label>Email <br/></label>\r\n                                <InputWrapper \r\n                                    value={this.state.email}\r\n                                    onChange={(e)=> this.setState ({ email: e.target.value })}\r\n                                    type=\"field\" />\r\n                            </FormWrapper>\r\n                            <FormWrapper>\r\n                                <label>Password <br/></label>\r\n                                <PasswordMask\r\n                                    inputStyles={{textAlign:\"center\"}}\r\n                                    buttonStyles={{display:\"none\"}}\r\n                                    value={this.state.password}\r\n                                    onChange={(e)=> this.setState ({ password: e.target.value })}/>\r\n                            </FormWrapper>\r\n                        </div>\r\n                    </form>\r\n                    <div>\r\n                        <ButtonWrapper onClick={this.submitCreateAccountForm}>{this.state.login? \"Login Account\" : \"Create Account\"}</ButtonWrapper>\r\n                        <ButtonWrapper onClick={(e) => this.onClickButton(e)}>{this.state.login? \"create a new account?\" : \"login to an existing account?\"}</ButtonWrapper>\r\n                    </div>\r\n                </LoginWrapper>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    graphql(getUsersQuery, {name: \"getUsersQuery\"}),\r\n    graphql(addUserMutation, {name: \"addUserMutation\"})\r\n)(Login);","import React from 'react';\r\nimport {Component} from 'react';\r\nimport styled from 'styled-components';\r\nimport ApolloClient from 'apollo-boost';\r\nimport {ApolloProvider} from 'react-apollo';\r\n\r\n//components\r\nimport Header from '../atoms/Header';\r\nimport LoggedIn from '../atoms/LoggedIn';\r\nimport AddFriend from '../atoms/AddFriend';\r\nimport AddPost from '../atoms/AddPost';\r\nimport Divider from '../atoms/Divider';\r\nimport PostItem from  '../molecules/PostItem';\r\nimport Login from '../molecules/Login';\r\n\r\n//apollo client setup local\r\n// const client = new ApolloClient({\r\n//     uri: 'http://localhost:4000/graphql'\r\n//   })\r\n\r\n//apollo client setup heroku\r\nconst client = new ApolloClient({\r\nuri: 'https://fitbook-graphql-heroku.herokuapp.com/graphql'\r\n})\r\n\r\nconst HomepageWrapper = styled.div`\r\n    display: grid;\r\n    grid-template-columns: repeat(4, 1fr);\r\n    grid-template-rows: repeat(4, 1fr);\r\n    grid-template-areas: \"Head    Head    Head2    Head2\"\r\n                         \"addPost addPost addPost addPost\"\r\n                         \"Divider Divider Divider Divider\"\r\n                         \"Post    Post    Post    Friend\";\r\n    height: 80px;\r\n`\r\n\r\nconst HeadWrapper = styled.div`\r\n    grid-area: Head;\r\n    align-self: center;\r\n`\r\n\r\nconst Head2Wrapper = styled.div`\r\n    grid-area: Head2;\r\n    align-self: center;\r\n`\r\n\r\nconst AddFriendWrapper = styled.div`\r\n    margin-left: 10px;\r\n    grid-area: Friend;\r\n    align-self: start;\r\n    justify-self: center;\r\n`\r\n\r\n\r\nconst AddPostWrapper = styled.div`\r\n    grid-area: addPost;\r\n    margin-top: 10px;\r\n    margin-bottom: 10px;\r\n    justify-self: center;\r\n`\r\n\r\nconst DividerWrapper = styled.div`\r\n    grid-area: Divider;\r\n    align-self: center;\r\n`\r\n\r\nconst PostItemWrapper = styled.div`\r\n    grid-area: Post;\r\n    justify-self: center;\r\n`\r\nclass Homepage extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            loggedin: false,\r\n            userID: \"\",\r\n            friendLists: [],\r\n        }\r\n    }\r\n\r\n    PageChange = (userID, friendLists) => {\r\n        this.setState ({\r\n            loggedin: !this.state.loggedin,\r\n            userID: userID,\r\n            friendLists: friendLists\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <ApolloProvider client={client}>\r\n                    {this.state.loggedin?\r\n                            <HomepageWrapper>\r\n                                <HeadWrapper>\r\n                                    <Header />\r\n                                </HeadWrapper>\r\n                                <Head2Wrapper>\r\n                                    <LoggedIn />\r\n                                </Head2Wrapper>\r\n                                <AddFriendWrapper>\r\n                                    <AddFriend userID={this.state.userID} friendLists={this.state.friendLists}/>\r\n                                </AddFriendWrapper>\r\n                                <AddPostWrapper>\r\n                                    <AddPost userID={this.state.userID}/>\r\n                                </AddPostWrapper>\r\n                                <DividerWrapper>\r\n                                    <Divider />\r\n                                </DividerWrapper>\r\n                                <PostItemWrapper >\r\n                                    <PostItem userID={this.state.userID} friendLists={this.state.friendLists}/>\r\n                                </PostItemWrapper>\r\n                            </HomepageWrapper> :\r\n                            <Login pagechange={this.PageChange}/>\r\n                    }\r\n            </ApolloProvider>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Homepage;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Homepage from './components/pages/Homepage'\r\n\r\nReactDOM.render(<Homepage />, document.getElementById('root'));"],"sourceRoot":""}